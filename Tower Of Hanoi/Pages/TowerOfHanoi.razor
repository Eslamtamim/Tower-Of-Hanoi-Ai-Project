<div class="m-3">
 <div class="position-absolute">
        <h1>Logs</h1>
        @foreach (var move in moves)
        {
            <div>Move: @move.from to @move.to </div>
        }

    </div>

    <div class="wrapper">
        <h2 class="title">Tower of Hanoi</h2>
        <div class="d-flex justify-content-center gap-5">
            @for (int i = 0; i < towers.Count; i++)
            {
                int temp = i;
                <div @onclick="()=> TowerClick(temp)" class="d-inline-block" style="cursor: pointer;">
                    <div class="tower" style="height: @(Math.Max(180,diskCount * 32))px;cursor: pointer;">
                        @{
                            int j = 0;
                            foreach (var disk in towers[i].Reverse())
                            {
                                <div class="disk" style="
                                                    height: 20px;
                                                    background-color: @colors[disk-1];
                                                    width: @(30 + (disk-1) * 30)px;
                                                    margin-bottom: @(((diskCount - 1)*20)- (diskCount - j -1) * 20)px;">
                                </div>
                                j++;
                            }
                        }
                    </div>
                </div>
            }
        </div>
    </div>
    <br>
    <div class="d-flex flex-column align-items-center gap-3 justify-content-center ">
        @{
            if (TempMove.from != -1)
            {
                int peek = 0;
                var con = towers[TempMove.from].TryPeek(out peek);
                if (con)
                {
                    <div> Move: &nbsp; </div>
                    <div class="disk"
                        style="margin:-10px 0px 10px @(30 + (peek-1) * 30)px;padding-right: inherit;background-color: @colors[ peek-1]; width: @(30 + (peek-1) * 30)px; height: 20px; position: static;">
                    </div>
                }
            }
            else
            {
                <div>Make A Move</div>
                <div> &nbsp; </div>
            }
        }

    </div>
    <div class="d-flex flex-column justify-content-center align-content-center align-items-center">
        <div class="MoveState"
            style="color: @(MoveStateColor is not null ? MoveStateColor == true ? "green": "red"  :"black");">
            @MoveState</div>
        <div>Moves: @Moves</div>
    </div>

    <div class="d-flex justify-content-center m-4 gap-4">
        <button class="btn btn-dark" @onclick="()=> {StepBack(); }">Step Back</button>
        <button class="btn btn-warning"
            @onclick="()=> { diskCount = Math.Min(8,diskCount+1); OnInitializedAsync(); }">Add Disk</button>
        <button class="btn btn-warning"
            @onclick="()=> { diskCount = Math.Max(3,diskCount-1); OnInitializedAsync(); }">Remove Disk</button>
        <button class="btn btn-danger" @onclick="()=> { OnInitializedAsync(); }">Reset Game</button>
    </div>
    
</div>

@code {


    record Move()
    {
        public int from { get; set; }
        public int to { get; set; }
    };


    int diskCount = 5;
    int Moves = 0;
    string MoveState = "You haven't moved any disks yet.";
    bool? MoveStateColor;
    List<string> colors = new List<string> { "#f0ece2", "#dfd3c3", "#c7b198", "#596e79", "#0e2e3b","#f0ece2",
"#dfd3c3","#c7b198", "#596e79", "#0e2e3b" };
    @* List<string> colors = new List<string> {" #afc5ff ","#fcff82" ,"#ff9c6d" ,"#fd5959 ","#ff0000" ,"#ffa952 ","#2772db
","#ff5d9e"}; *@

    List<Stack<int>> towers = new();


    Stack<Move> moves = new();
    Move TempMove = new()
        {
            from = -1,
            to = -1
        };



    protected override Task OnInitializedAsync()
    {

        towers = new List<Stack<int>> {
new Stack<int>(Enumerable.Range(1, diskCount).Reverse()),
new Stack<int>(),
new Stack<int>() };

        MoveState = "You haven't moved any disks yet.";
        MoveStateColor = null;
        Moves = 0;
        TempMove = new()
            {
                from = -1,
                to = -1
            };
            moves = new();
        return base.OnInitializedAsync();
    }
    void TowerClick(int Index)
    {

        if (TempMove.from == -1)
        {
            if (towers[Index].Count == 0)
            {
                MoveState = "There are no disks to move from this tower.";
                MoveStateColor = false;
                return;
            }
            TempMove.from = Index;
        }
        else
        {
            TempMove.to = Index;
            if (TempMove.from != TempMove.to)
            {
                MoveDiskIfPossible(TempMove.from, TempMove.to);
            }
            TempMove.from = -1;
            TempMove.to = -1;
        }
    }

    bool MoveDiskIfPossible(int from, int to)
    {
        if (towers[from].Count == 0)
        {
            MoveState = "There are no disks to move from this tower.";
            MoveStateColor = false;
            return false;
        }
        if (towers[to].Count == 0 || towers[to].Peek() > towers[from].Peek())
        {
            towers[to].Push(towers[from].Pop());
            MoveState = "You moved a disk from tower " + (from + 1) + " to tower " + (to + 1) + ".";
            Moves++;
            MoveStateColor = true;
            moves.Push(new Move() { from = from+1, to = to+1 });
            return true;
        }
        MoveState = "You cannot move a larger disk on top of a smaller disk.";
        MoveStateColor = false;
        return false;
    }

    void StepBack()
    {
        if (moves.Count > 0)
        {
            var move = moves.Pop();
            MoveDiskIfPossible(move.to - 1, move.from - 1);
            TempMove = new()
            {
                from = -1,
                to = -1
            };
            moves.Pop();
        }
    }
}