@using Tower_Of_Hanoi.Data


<div class="m-3">
    <div class="position-absolute">
        <h1>Logs</h1>
        @foreach (var move in HanoiTower.MovesStack)
        {
            <div>Move: @move.From to @move.To </div>
        }

    </div>

    <div class="wrapper">
        <h2 class="title">Tower of Hanoi</h2>
        <div class="d-flex justify-content-center gap-5">
            @for (var i = 0; i < HanoiTower.Towers.Count; i++)
            {
                var temp = i;
                <div @onclick="() => HanoiTower.TowerClick(temp)" class="d-inline-block" style="cursor: pointer;">
                    <div class="tower" style="height: @(Math.Max(180, HanoiTower.DiskCount * 32))px;cursor: pointer;">
                        @{
                            var j = 0;
                            foreach (var disk in HanoiTower.Towers[i].Reverse())
                            {
                                <div class="disk" style="
                                                    height: 20px;
                                                    background-color: @HanoiTower.Colors[disk - 1];
                                                    width: @(30 + (disk - 1) * 30)px;
                                                    margin-bottom: @(((HanoiTower.DiskCount - 1) * 20) - (HanoiTower.DiskCount - j - 1) * 20)px;">
                                </div>
                                j++;
                            }
                        }
                    </div>
                </div>
            }
        </div>
    </div>
    <br>
    <div class="d-flex flex-column align-items-center gap-3 justify-content-center ">
        @{
            if (HanoiTower.TempMove.From != -1)
            {
                var con = HanoiTower.Towers[HanoiTower.TempMove.From].TryPeek(out var peek);
                if (con)
                {
                    <div> Move: &nbsp; </div>
                    <div class="disk"
                         style="margin:-10px 0 10px @(30 + (peek - 1) * 30)px;padding-right: inherit;background-color: @HanoiTower.Colors[peek - 1]; width: @(30 + (peek - 1) * 30)px; height: 20px; position: static;">
                    </div>
                }
            }
            else
            {
                <div>Make A Move</div>
                <div> &nbsp; </div>
            }
        }

    </div>
    <div class="d-flex flex-column justify-content-center align-content-center align-items-center">
        <div class="HanoiTower.MoveState"
             style="color: @(HanoiTower.MoveStateColor is not null ? HanoiTower.MoveStateColor == true ? "green" : "red" : "black");">
            @HanoiTower.MoveState
        </div>
        <div>Moves: @HanoiTower.MovesCount</div>
        <div>Depth: @_depth</div>
    </div>

    <div class="d-flex justify-content-center m-4 gap-4">
        <button class="btn btn-dark" @onclick="HanoiTower.StepBack">Step Back</button>
        <button class="btn btn-warning"
                @onclick="() => { HanoiTower.DiskCount = Math.Min(8, HanoiTower.DiskCount + 1); Init(HanoiTower.DiskCount); StateHasChanged(); }">
            Add Disk
        </button>
        <button class="btn btn-warning"
                @onclick="() => { HanoiTower.DiskCount = Math.Max(3, HanoiTower.DiskCount - 1); Init(HanoiTower.DiskCount); }">
            Remove Disk
        </button>
        <button class="btn btn-danger" @onclick="() => { OnInitializedAsync(); }">Reset Game</button>
        <button class="btn btn-outline-warning" @onclick="SolveUsingAStar">A*</button>
    </div>

</div>

@code {

    HanoiTower HanoiTower { get; set; } = new();
    int _depth;

    protected override Task OnInitializedAsync()
    {
        Init();
        return base.OnInitializedAsync();
    }

    async void Init(int? diskCount = 5, List<Stack<int>>? towers = null)
    {
        HanoiTower = new HanoiTower(diskCount);
        await InvokeAsync(StateHasChanged);
    }

    async Task SolveUsingAStar()
    {
        Node root = new(HanoiTower.Towers, null, null);
        var path = await AStar_Search(root);
        if (!path.Any()) return;
        foreach (var move in path)
        {
            HanoiTower.MoveDiskIfPossible(move.From, move.To);
            await InvokeAsync(StateHasChanged);
            await Task.Delay(300);

        }
        HanoiTower.MoveState = "Solved";
        HanoiTower.MoveStateColor = true;
        await InvokeAsync(StateHasChanged);
    }

    async Task<Stack<Move>> AStar_Search(Node root)
    {
        var frontier = new PriorityQueue<Node, int>(new PriorityComparer<int>());
        var hCost = root.TotalCost;
        frontier.Enqueue(root, root.TotalCost);

        var visitedStates = new HashSet<string>() { root.HashedState };

        while (frontier.TryPeek(out var currentNode, out var _))
        {
            frontier.Dequeue();

            if (Node.IsGoal(currentNode!.State))
            {
                return currentNode.GeneratePath();
            }

            currentNode.GenerateSuccessors();
            foreach (var successor in currentNode.Successors)
            {
                successor.Cost = currentNode.Cost - 1;
                if (visitedStates.Contains(successor.HashedState)) continue;
                visitedStates.Add(successor.HashedState);
                frontier.Enqueue(successor, successor.TotalCost);
            }
            _depth++;
            await InvokeAsync(StateHasChanged);
        }
        return new Stack<Move>();
    }


    class PriorityComparer<TPriority> : IComparer<TPriority>
    {
        public int Compare(TPriority x, TPriority y)
        {
            return Comparer<TPriority>.Default.Compare(y, x);
        }
    }
}